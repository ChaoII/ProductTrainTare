/**
 *
 *  History.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "History.h"
#include "Train.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string History::Cols::_id = "id";
const std::string History::Cols::_time = "time";
const std::string History::Cols::_train_mode = "train_mode";
const std::string History::Cols::_train_num = "train_num";
const std::string History::Cols::_dead_weight = "dead_weight";
const std::string History::Cols::_rough_weight = "rough_weight";
const std::string History::Cols::_volume = "volume";
const std::string History::Cols::_length = "length";
const std::string History::Cols::_pic_url = "pic_url";
const std::string History::Cols::_train_id = "train_id";
const std::string History::primaryKeyName = "id";
const bool History::hasPrimaryKey = true;
const std::string History::tableName = "history";

const std::vector<typename History::MetaData> History::metaData_={
{"id","uint64_t","integer",8,1,1,1},
{"time","std::string","text",0,0,0,0},
{"train_mode","std::string","text",0,0,0,0},
{"train_num","std::string","text",0,0,0,0},
{"dead_weight","std::string","text",0,0,0,0},
{"rough_weight","std::string","text",0,0,0,0},
{"volume","std::string","text",0,0,0,0},
{"length","std::string","text",0,0,0,0},
{"pic_url","std::string","text",0,0,0,0},
{"train_id","uint64_t","integer",8,0,0,1}
};
const std::string &History::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
History::History(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["time"].isNull())
        {
            time_=std::make_shared<std::string>(r["time"].as<std::string>());
        }
        if(!r["train_mode"].isNull())
        {
            trainMode_=std::make_shared<std::string>(r["train_mode"].as<std::string>());
        }
        if(!r["train_num"].isNull())
        {
            trainNum_=std::make_shared<std::string>(r["train_num"].as<std::string>());
        }
        if(!r["dead_weight"].isNull())
        {
            deadWeight_=std::make_shared<std::string>(r["dead_weight"].as<std::string>());
        }
        if(!r["rough_weight"].isNull())
        {
            roughWeight_=std::make_shared<std::string>(r["rough_weight"].as<std::string>());
        }
        if(!r["volume"].isNull())
        {
            volume_=std::make_shared<std::string>(r["volume"].as<std::string>());
        }
        if(!r["length"].isNull())
        {
            length_=std::make_shared<std::string>(r["length"].as<std::string>());
        }
        if(!r["pic_url"].isNull())
        {
            picUrl_=std::make_shared<std::string>(r["pic_url"].as<std::string>());
        }
        if(!r["train_id"].isNull())
        {
            trainId_=std::make_shared<uint64_t>(r["train_id"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 10 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            time_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            trainMode_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            trainNum_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            deadWeight_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            roughWeight_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            volume_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            length_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            picUrl_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            trainId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

History::History(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 10)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            time_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            trainMode_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            trainNum_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            deadWeight_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            roughWeight_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            volume_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            length_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            picUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            trainId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
}

History::History(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["time"].isNull())
        {
            time_=std::make_shared<std::string>(pJson["time"].asString());
        }
    }
    if(pJson.isMember("train_mode"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["train_mode"].isNull())
        {
            trainMode_=std::make_shared<std::string>(pJson["train_mode"].asString());
        }
    }
    if(pJson.isMember("train_num"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["train_num"].isNull())
        {
            trainNum_=std::make_shared<std::string>(pJson["train_num"].asString());
        }
    }
    if(pJson.isMember("dead_weight"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["dead_weight"].isNull())
        {
            deadWeight_=std::make_shared<std::string>(pJson["dead_weight"].asString());
        }
    }
    if(pJson.isMember("rough_weight"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["rough_weight"].isNull())
        {
            roughWeight_=std::make_shared<std::string>(pJson["rough_weight"].asString());
        }
    }
    if(pJson.isMember("volume"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["volume"].isNull())
        {
            volume_=std::make_shared<std::string>(pJson["volume"].asString());
        }
    }
    if(pJson.isMember("length"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["length"].isNull())
        {
            length_=std::make_shared<std::string>(pJson["length"].asString());
        }
    }
    if(pJson.isMember("pic_url"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["pic_url"].isNull())
        {
            picUrl_=std::make_shared<std::string>(pJson["pic_url"].asString());
        }
    }
    if(pJson.isMember("train_id"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["train_id"].isNull())
        {
            trainId_=std::make_shared<uint64_t>((uint64_t)pJson["train_id"].asUInt64());
        }
    }
}

void History::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 10)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            time_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            trainMode_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            trainNum_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            deadWeight_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            roughWeight_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            volume_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            length_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            picUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            trainId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
}

void History::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["time"].isNull())
        {
            time_=std::make_shared<std::string>(pJson["time"].asString());
        }
    }
    if(pJson.isMember("train_mode"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["train_mode"].isNull())
        {
            trainMode_=std::make_shared<std::string>(pJson["train_mode"].asString());
        }
    }
    if(pJson.isMember("train_num"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["train_num"].isNull())
        {
            trainNum_=std::make_shared<std::string>(pJson["train_num"].asString());
        }
    }
    if(pJson.isMember("dead_weight"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["dead_weight"].isNull())
        {
            deadWeight_=std::make_shared<std::string>(pJson["dead_weight"].asString());
        }
    }
    if(pJson.isMember("rough_weight"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["rough_weight"].isNull())
        {
            roughWeight_=std::make_shared<std::string>(pJson["rough_weight"].asString());
        }
    }
    if(pJson.isMember("volume"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["volume"].isNull())
        {
            volume_=std::make_shared<std::string>(pJson["volume"].asString());
        }
    }
    if(pJson.isMember("length"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["length"].isNull())
        {
            length_=std::make_shared<std::string>(pJson["length"].asString());
        }
    }
    if(pJson.isMember("pic_url"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["pic_url"].isNull())
        {
            picUrl_=std::make_shared<std::string>(pJson["pic_url"].asString());
        }
    }
    if(pJson.isMember("train_id"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["train_id"].isNull())
        {
            trainId_=std::make_shared<uint64_t>((uint64_t)pJson["train_id"].asUInt64());
        }
    }
}

const uint64_t &History::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &History::getId() const noexcept
{
    return id_;
}
void History::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename History::PrimaryKeyType & History::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &History::getValueOfTime() const noexcept
{
    const static std::string defaultValue = std::string();
    if(time_)
        return *time_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getTime() const noexcept
{
    return time_;
}
void History::setTime(const std::string &pTime) noexcept
{
    time_ = std::make_shared<std::string>(pTime);
    dirtyFlag_[1] = true;
}
void History::setTime(std::string &&pTime) noexcept
{
    time_ = std::make_shared<std::string>(std::move(pTime));
    dirtyFlag_[1] = true;
}
void History::setTimeToNull() noexcept
{
    time_.reset();
    dirtyFlag_[1] = true;
}

const std::string &History::getValueOfTrainMode() const noexcept
{
    const static std::string defaultValue = std::string();
    if(trainMode_)
        return *trainMode_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getTrainMode() const noexcept
{
    return trainMode_;
}
void History::setTrainMode(const std::string &pTrainMode) noexcept
{
    trainMode_ = std::make_shared<std::string>(pTrainMode);
    dirtyFlag_[2] = true;
}
void History::setTrainMode(std::string &&pTrainMode) noexcept
{
    trainMode_ = std::make_shared<std::string>(std::move(pTrainMode));
    dirtyFlag_[2] = true;
}
void History::setTrainModeToNull() noexcept
{
    trainMode_.reset();
    dirtyFlag_[2] = true;
}

const std::string &History::getValueOfTrainNum() const noexcept
{
    const static std::string defaultValue = std::string();
    if(trainNum_)
        return *trainNum_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getTrainNum() const noexcept
{
    return trainNum_;
}
void History::setTrainNum(const std::string &pTrainNum) noexcept
{
    trainNum_ = std::make_shared<std::string>(pTrainNum);
    dirtyFlag_[3] = true;
}
void History::setTrainNum(std::string &&pTrainNum) noexcept
{
    trainNum_ = std::make_shared<std::string>(std::move(pTrainNum));
    dirtyFlag_[3] = true;
}
void History::setTrainNumToNull() noexcept
{
    trainNum_.reset();
    dirtyFlag_[3] = true;
}

const std::string &History::getValueOfDeadWeight() const noexcept
{
    const static std::string defaultValue = std::string();
    if(deadWeight_)
        return *deadWeight_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getDeadWeight() const noexcept
{
    return deadWeight_;
}
void History::setDeadWeight(const std::string &pDeadWeight) noexcept
{
    deadWeight_ = std::make_shared<std::string>(pDeadWeight);
    dirtyFlag_[4] = true;
}
void History::setDeadWeight(std::string &&pDeadWeight) noexcept
{
    deadWeight_ = std::make_shared<std::string>(std::move(pDeadWeight));
    dirtyFlag_[4] = true;
}
void History::setDeadWeightToNull() noexcept
{
    deadWeight_.reset();
    dirtyFlag_[4] = true;
}

const std::string &History::getValueOfRoughWeight() const noexcept
{
    const static std::string defaultValue = std::string();
    if(roughWeight_)
        return *roughWeight_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getRoughWeight() const noexcept
{
    return roughWeight_;
}
void History::setRoughWeight(const std::string &pRoughWeight) noexcept
{
    roughWeight_ = std::make_shared<std::string>(pRoughWeight);
    dirtyFlag_[5] = true;
}
void History::setRoughWeight(std::string &&pRoughWeight) noexcept
{
    roughWeight_ = std::make_shared<std::string>(std::move(pRoughWeight));
    dirtyFlag_[5] = true;
}
void History::setRoughWeightToNull() noexcept
{
    roughWeight_.reset();
    dirtyFlag_[5] = true;
}

const std::string &History::getValueOfVolume() const noexcept
{
    const static std::string defaultValue = std::string();
    if(volume_)
        return *volume_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getVolume() const noexcept
{
    return volume_;
}
void History::setVolume(const std::string &pVolume) noexcept
{
    volume_ = std::make_shared<std::string>(pVolume);
    dirtyFlag_[6] = true;
}
void History::setVolume(std::string &&pVolume) noexcept
{
    volume_ = std::make_shared<std::string>(std::move(pVolume));
    dirtyFlag_[6] = true;
}
void History::setVolumeToNull() noexcept
{
    volume_.reset();
    dirtyFlag_[6] = true;
}

const std::string &History::getValueOfLength() const noexcept
{
    const static std::string defaultValue = std::string();
    if(length_)
        return *length_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getLength() const noexcept
{
    return length_;
}
void History::setLength(const std::string &pLength) noexcept
{
    length_ = std::make_shared<std::string>(pLength);
    dirtyFlag_[7] = true;
}
void History::setLength(std::string &&pLength) noexcept
{
    length_ = std::make_shared<std::string>(std::move(pLength));
    dirtyFlag_[7] = true;
}
void History::setLengthToNull() noexcept
{
    length_.reset();
    dirtyFlag_[7] = true;
}

const std::string &History::getValueOfPicUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(picUrl_)
        return *picUrl_;
    return defaultValue;
}
const std::shared_ptr<std::string> &History::getPicUrl() const noexcept
{
    return picUrl_;
}
void History::setPicUrl(const std::string &pPicUrl) noexcept
{
    picUrl_ = std::make_shared<std::string>(pPicUrl);
    dirtyFlag_[8] = true;
}
void History::setPicUrl(std::string &&pPicUrl) noexcept
{
    picUrl_ = std::make_shared<std::string>(std::move(pPicUrl));
    dirtyFlag_[8] = true;
}
void History::setPicUrlToNull() noexcept
{
    picUrl_.reset();
    dirtyFlag_[8] = true;
}

const uint64_t &History::getValueOfTrainId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(trainId_)
        return *trainId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &History::getTrainId() const noexcept
{
    return trainId_;
}
void History::setTrainId(const uint64_t &pTrainId) noexcept
{
    trainId_ = std::make_shared<uint64_t>(pTrainId);
    dirtyFlag_[9] = true;
}

void History::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &History::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "time",
        "train_mode",
        "train_num",
        "dead_weight",
        "rough_weight",
        "volume",
        "length",
        "pic_url",
        "train_id"
    };
    return inCols;
}

void History::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTime())
        {
            binder << getValueOfTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTrainMode())
        {
            binder << getValueOfTrainMode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTrainNum())
        {
            binder << getValueOfTrainNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDeadWeight())
        {
            binder << getValueOfDeadWeight();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getRoughWeight())
        {
            binder << getValueOfRoughWeight();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getVolume())
        {
            binder << getValueOfVolume();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getLength())
        {
            binder << getValueOfLength();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getPicUrl())
        {
            binder << getValueOfPicUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getTrainId())
        {
            binder << getValueOfTrainId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> History::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    return ret;
}

void History::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getTime())
        {
            binder << getValueOfTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTrainMode())
        {
            binder << getValueOfTrainMode();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getTrainNum())
        {
            binder << getValueOfTrainNum();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDeadWeight())
        {
            binder << getValueOfDeadWeight();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getRoughWeight())
        {
            binder << getValueOfRoughWeight();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getVolume())
        {
            binder << getValueOfVolume();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getLength())
        {
            binder << getValueOfLength();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getPicUrl())
        {
            binder << getValueOfPicUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getTrainId())
        {
            binder << getValueOfTrainId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value History::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTime())
    {
        ret["time"]=getValueOfTime();
    }
    else
    {
        ret["time"]=Json::Value();
    }
    if(getTrainMode())
    {
        ret["train_mode"]=getValueOfTrainMode();
    }
    else
    {
        ret["train_mode"]=Json::Value();
    }
    if(getTrainNum())
    {
        ret["train_num"]=getValueOfTrainNum();
    }
    else
    {
        ret["train_num"]=Json::Value();
    }
    if(getDeadWeight())
    {
        ret["dead_weight"]=getValueOfDeadWeight();
    }
    else
    {
        ret["dead_weight"]=Json::Value();
    }
    if(getRoughWeight())
    {
        ret["rough_weight"]=getValueOfRoughWeight();
    }
    else
    {
        ret["rough_weight"]=Json::Value();
    }
    if(getVolume())
    {
        ret["volume"]=getValueOfVolume();
    }
    else
    {
        ret["volume"]=Json::Value();
    }
    if(getLength())
    {
        ret["length"]=getValueOfLength();
    }
    else
    {
        ret["length"]=Json::Value();
    }
    if(getPicUrl())
    {
        ret["pic_url"]=getValueOfPicUrl();
    }
    else
    {
        ret["pic_url"]=Json::Value();
    }
    if(getTrainId())
    {
        ret["train_id"]=(Json::UInt64)getValueOfTrainId();
    }
    else
    {
        ret["train_id"]=Json::Value();
    }
    return ret;
}

Json::Value History::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 10)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getTime())
            {
                ret[pMasqueradingVector[1]]=getValueOfTime();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTrainMode())
            {
                ret[pMasqueradingVector[2]]=getValueOfTrainMode();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getTrainNum())
            {
                ret[pMasqueradingVector[3]]=getValueOfTrainNum();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getDeadWeight())
            {
                ret[pMasqueradingVector[4]]=getValueOfDeadWeight();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getRoughWeight())
            {
                ret[pMasqueradingVector[5]]=getValueOfRoughWeight();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getVolume())
            {
                ret[pMasqueradingVector[6]]=getValueOfVolume();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getLength())
            {
                ret[pMasqueradingVector[7]]=getValueOfLength();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getPicUrl())
            {
                ret[pMasqueradingVector[8]]=getValueOfPicUrl();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getTrainId())
            {
                ret[pMasqueradingVector[9]]=(Json::UInt64)getValueOfTrainId();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getTime())
    {
        ret["time"]=getValueOfTime();
    }
    else
    {
        ret["time"]=Json::Value();
    }
    if(getTrainMode())
    {
        ret["train_mode"]=getValueOfTrainMode();
    }
    else
    {
        ret["train_mode"]=Json::Value();
    }
    if(getTrainNum())
    {
        ret["train_num"]=getValueOfTrainNum();
    }
    else
    {
        ret["train_num"]=Json::Value();
    }
    if(getDeadWeight())
    {
        ret["dead_weight"]=getValueOfDeadWeight();
    }
    else
    {
        ret["dead_weight"]=Json::Value();
    }
    if(getRoughWeight())
    {
        ret["rough_weight"]=getValueOfRoughWeight();
    }
    else
    {
        ret["rough_weight"]=Json::Value();
    }
    if(getVolume())
    {
        ret["volume"]=getValueOfVolume();
    }
    else
    {
        ret["volume"]=Json::Value();
    }
    if(getLength())
    {
        ret["length"]=getValueOfLength();
    }
    else
    {
        ret["length"]=Json::Value();
    }
    if(getPicUrl())
    {
        ret["pic_url"]=getValueOfPicUrl();
    }
    else
    {
        ret["pic_url"]=Json::Value();
    }
    if(getTrainId())
    {
        ret["train_id"]=(Json::UInt64)getValueOfTrainId();
    }
    else
    {
        ret["train_id"]=Json::Value();
    }
    return ret;
}

bool History::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("time"))
    {
        if(!validJsonOfField(1, "time", pJson["time"], err, true))
            return false;
    }
    if(pJson.isMember("train_mode"))
    {
        if(!validJsonOfField(2, "train_mode", pJson["train_mode"], err, true))
            return false;
    }
    if(pJson.isMember("train_num"))
    {
        if(!validJsonOfField(3, "train_num", pJson["train_num"], err, true))
            return false;
    }
    if(pJson.isMember("dead_weight"))
    {
        if(!validJsonOfField(4, "dead_weight", pJson["dead_weight"], err, true))
            return false;
    }
    if(pJson.isMember("rough_weight"))
    {
        if(!validJsonOfField(5, "rough_weight", pJson["rough_weight"], err, true))
            return false;
    }
    if(pJson.isMember("volume"))
    {
        if(!validJsonOfField(6, "volume", pJson["volume"], err, true))
            return false;
    }
    if(pJson.isMember("length"))
    {
        if(!validJsonOfField(7, "length", pJson["length"], err, true))
            return false;
    }
    if(pJson.isMember("pic_url"))
    {
        if(!validJsonOfField(8, "pic_url", pJson["pic_url"], err, true))
            return false;
    }
    if(pJson.isMember("train_id"))
    {
        if(!validJsonOfField(9, "train_id", pJson["train_id"], err, true))
            return false;
    }
    else
    {
        err="The train_id column cannot be null";
        return false;
    }
    return true;
}
bool History::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 10)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[9] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool History::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("time"))
    {
        if(!validJsonOfField(1, "time", pJson["time"], err, false))
            return false;
    }
    if(pJson.isMember("train_mode"))
    {
        if(!validJsonOfField(2, "train_mode", pJson["train_mode"], err, false))
            return false;
    }
    if(pJson.isMember("train_num"))
    {
        if(!validJsonOfField(3, "train_num", pJson["train_num"], err, false))
            return false;
    }
    if(pJson.isMember("dead_weight"))
    {
        if(!validJsonOfField(4, "dead_weight", pJson["dead_weight"], err, false))
            return false;
    }
    if(pJson.isMember("rough_weight"))
    {
        if(!validJsonOfField(5, "rough_weight", pJson["rough_weight"], err, false))
            return false;
    }
    if(pJson.isMember("volume"))
    {
        if(!validJsonOfField(6, "volume", pJson["volume"], err, false))
            return false;
    }
    if(pJson.isMember("length"))
    {
        if(!validJsonOfField(7, "length", pJson["length"], err, false))
            return false;
    }
    if(pJson.isMember("pic_url"))
    {
        if(!validJsonOfField(8, "pic_url", pJson["pic_url"], err, false))
            return false;
    }
    if(pJson.isMember("train_id"))
    {
        if(!validJsonOfField(9, "train_id", pJson["train_id"], err, false))
            return false;
    }
    return true;
}
bool History::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 10)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool History::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
void History::getTrain(const DbClientPtr &clientPtr,
                       const std::function<void(Train)> &rcb,
                       const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from train where id = ?";
    *clientPtr << sql
               << *trainId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Train(r[0]));
                    }
               }
               >> ecb;
}
