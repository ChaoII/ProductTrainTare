/**
 *
 *  Picture.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Picture.h"
#include "Detail.h"
#include "Train.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Picture::Cols::_id = "id";
const std::string Picture::Cols::_pic_url = "pic_url";
const std::string Picture::Cols::_train_id = "train_id";
const std::string Picture::Cols::_type = "type";
const std::string Picture::primaryKeyName = "id";
const bool Picture::hasPrimaryKey = true;
const std::string Picture::tableName = "picture";

const std::vector<typename Picture::MetaData> Picture::metaData_={
{"id","uint64_t","integer",8,1,1,1},
{"pic_url","std::string","text",0,0,0,0},
{"train_id","uint64_t","integer",8,0,0,1},
{"type","uint64_t","integer",8,0,0,1}
};
const std::string &Picture::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Picture::Picture(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["pic_url"].isNull())
        {
            picUrl_=std::make_shared<std::string>(r["pic_url"].as<std::string>());
        }
        if(!r["train_id"].isNull())
        {
            trainId_=std::make_shared<uint64_t>(r["train_id"].as<uint64_t>());
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<uint64_t>(r["type"].as<uint64_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 4 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            picUrl_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            trainId_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            type_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
    }

}

Picture::Picture(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            picUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            trainId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            type_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
}

Picture::Picture(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("pic_url"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["pic_url"].isNull())
        {
            picUrl_=std::make_shared<std::string>(pJson["pic_url"].asString());
        }
    }
    if(pJson.isMember("train_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["train_id"].isNull())
        {
            trainId_=std::make_shared<uint64_t>((uint64_t)pJson["train_id"].asUInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<uint64_t>((uint64_t)pJson["type"].asUInt64());
        }
    }
}

void Picture::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 4)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            picUrl_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            trainId_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            type_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
}

void Picture::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("pic_url"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["pic_url"].isNull())
        {
            picUrl_=std::make_shared<std::string>(pJson["pic_url"].asString());
        }
    }
    if(pJson.isMember("train_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["train_id"].isNull())
        {
            trainId_=std::make_shared<uint64_t>((uint64_t)pJson["train_id"].asUInt64());
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<uint64_t>((uint64_t)pJson["type"].asUInt64());
        }
    }
}

const uint64_t &Picture::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Picture::getId() const noexcept
{
    return id_;
}
void Picture::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Picture::PrimaryKeyType & Picture::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Picture::getValueOfPicUrl() const noexcept
{
    const static std::string defaultValue = std::string();
    if(picUrl_)
        return *picUrl_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Picture::getPicUrl() const noexcept
{
    return picUrl_;
}
void Picture::setPicUrl(const std::string &pPicUrl) noexcept
{
    picUrl_ = std::make_shared<std::string>(pPicUrl);
    dirtyFlag_[1] = true;
}
void Picture::setPicUrl(std::string &&pPicUrl) noexcept
{
    picUrl_ = std::make_shared<std::string>(std::move(pPicUrl));
    dirtyFlag_[1] = true;
}
void Picture::setPicUrlToNull() noexcept
{
    picUrl_.reset();
    dirtyFlag_[1] = true;
}

const uint64_t &Picture::getValueOfTrainId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(trainId_)
        return *trainId_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Picture::getTrainId() const noexcept
{
    return trainId_;
}
void Picture::setTrainId(const uint64_t &pTrainId) noexcept
{
    trainId_ = std::make_shared<uint64_t>(pTrainId);
    dirtyFlag_[2] = true;
}

const uint64_t &Picture::getValueOfType() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Picture::getType() const noexcept
{
    return type_;
}
void Picture::setType(const uint64_t &pType) noexcept
{
    type_ = std::make_shared<uint64_t>(pType);
    dirtyFlag_[3] = true;
}

void Picture::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Picture::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "pic_url",
        "train_id",
        "type"
    };
    return inCols;
}

void Picture::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getPicUrl())
        {
            binder << getValueOfPicUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTrainId())
        {
            binder << getValueOfTrainId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Picture::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    return ret;
}

void Picture::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getPicUrl())
        {
            binder << getValueOfPicUrl();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getTrainId())
        {
            binder << getValueOfTrainId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Picture::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPicUrl())
    {
        ret["pic_url"]=getValueOfPicUrl();
    }
    else
    {
        ret["pic_url"]=Json::Value();
    }
    if(getTrainId())
    {
        ret["train_id"]=(Json::UInt64)getValueOfTrainId();
    }
    else
    {
        ret["train_id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=(Json::UInt64)getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    return ret;
}

Json::Value Picture::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 4)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getPicUrl())
            {
                ret[pMasqueradingVector[1]]=getValueOfPicUrl();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getTrainId())
            {
                ret[pMasqueradingVector[2]]=(Json::UInt64)getValueOfTrainId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getPicUrl())
    {
        ret["pic_url"]=getValueOfPicUrl();
    }
    else
    {
        ret["pic_url"]=Json::Value();
    }
    if(getTrainId())
    {
        ret["train_id"]=(Json::UInt64)getValueOfTrainId();
    }
    else
    {
        ret["train_id"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=(Json::UInt64)getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    return ret;
}

bool Picture::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("pic_url"))
    {
        if(!validJsonOfField(1, "pic_url", pJson["pic_url"], err, true))
            return false;
    }
    if(pJson.isMember("train_id"))
    {
        if(!validJsonOfField(2, "train_id", pJson["train_id"], err, true))
            return false;
    }
    else
    {
        err="The train_id column cannot be null";
        return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(3, "type", pJson["type"], err, true))
            return false;
    }
    else
    {
        err="The type column cannot be null";
        return false;
    }
    return true;
}
bool Picture::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Picture::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("pic_url"))
    {
        if(!validJsonOfField(1, "pic_url", pJson["pic_url"], err, false))
            return false;
    }
    if(pJson.isMember("train_id"))
    {
        if(!validJsonOfField(2, "train_id", pJson["train_id"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(3, "type", pJson["type"], err, false))
            return false;
    }
    return true;
}
bool Picture::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 4)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Picture::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
void Picture::getTrain(const DbClientPtr &clientPtr,
                       const std::function<void(Train)> &rcb,
                       const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from train where id = ?";
    *clientPtr << sql
               << *trainId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Train(r[0]));
                    }
               }
               >> ecb;
}
void Picture::getDetail(const DbClientPtr &clientPtr,
                        const std::function<void(std::vector<Detail>)> &rcb,
                        const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from detail where picture_id = ?";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Detail> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Detail(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
