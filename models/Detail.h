/**
 *
 *  Detail.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace sqlite3
{
class Picture;

class Detail
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _train_num;
        static const std::string _dead_weight;
        static const std::string _rough_weight;
        static const std::string _volume;
        static const std::string _length;
        static const std::string _train_num_url;
        static const std::string _dead_weight_url;
        static const std::string _rough_weight_url;
        static const std::string _volume_url;
        static const std::string _length_url;
        static const std::string _picture_id;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint64_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Detail(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Detail(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Detail(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Detail() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint64_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const uint64_t &pId) noexcept;

    /**  For column train_num  */
    ///Get the value of the column train_num, returns the default value if the column is null
    const std::string &getValueOfTrainNum() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getTrainNum() const noexcept;
    ///Set the value of the column train_num
    void setTrainNum(const std::string &pTrainNum) noexcept;
    void setTrainNum(std::string &&pTrainNum) noexcept;
    void setTrainNumToNull() noexcept;

    /**  For column dead_weight  */
    ///Get the value of the column dead_weight, returns the default value if the column is null
    const double &getValueOfDeadWeight() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getDeadWeight() const noexcept;
    ///Set the value of the column dead_weight
    void setDeadWeight(const double &pDeadWeight) noexcept;
    void setDeadWeightToNull() noexcept;

    /**  For column rough_weight  */
    ///Get the value of the column rough_weight, returns the default value if the column is null
    const double &getValueOfRoughWeight() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getRoughWeight() const noexcept;
    ///Set the value of the column rough_weight
    void setRoughWeight(const double &pRoughWeight) noexcept;
    void setRoughWeightToNull() noexcept;

    /**  For column volume  */
    ///Get the value of the column volume, returns the default value if the column is null
    const double &getValueOfVolume() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getVolume() const noexcept;
    ///Set the value of the column volume
    void setVolume(const double &pVolume) noexcept;
    void setVolumeToNull() noexcept;

    /**  For column length  */
    ///Get the value of the column length, returns the default value if the column is null
    const double &getValueOfLength() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<double> &getLength() const noexcept;
    ///Set the value of the column length
    void setLength(const double &pLength) noexcept;
    void setLengthToNull() noexcept;

    /**  For column train_num_url  */
    ///Get the value of the column train_num_url, returns the default value if the column is null
    const uint64_t &getValueOfTrainNumUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getTrainNumUrl() const noexcept;
    ///Set the value of the column train_num_url
    void setTrainNumUrl(const uint64_t &pTrainNumUrl) noexcept;
    void setTrainNumUrlToNull() noexcept;

    /**  For column dead_weight_url  */
    ///Get the value of the column dead_weight_url, returns the default value if the column is null
    const uint64_t &getValueOfDeadWeightUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getDeadWeightUrl() const noexcept;
    ///Set the value of the column dead_weight_url
    void setDeadWeightUrl(const uint64_t &pDeadWeightUrl) noexcept;
    void setDeadWeightUrlToNull() noexcept;

    /**  For column rough_weight_url  */
    ///Get the value of the column rough_weight_url, returns the default value if the column is null
    const uint64_t &getValueOfRoughWeightUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getRoughWeightUrl() const noexcept;
    ///Set the value of the column rough_weight_url
    void setRoughWeightUrl(const uint64_t &pRoughWeightUrl) noexcept;
    void setRoughWeightUrlToNull() noexcept;

    /**  For column volume_url  */
    ///Get the value of the column volume_url, returns the default value if the column is null
    const uint64_t &getValueOfVolumeUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getVolumeUrl() const noexcept;
    ///Set the value of the column volume_url
    void setVolumeUrl(const uint64_t &pVolumeUrl) noexcept;
    void setVolumeUrlToNull() noexcept;

    /**  For column length_url  */
    ///Get the value of the column length_url, returns the default value if the column is null
    const uint64_t &getValueOfLengthUrl() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getLengthUrl() const noexcept;
    ///Set the value of the column length_url
    void setLengthUrl(const uint64_t &pLengthUrl) noexcept;
    void setLengthUrlToNull() noexcept;

    /**  For column picture_id  */
    ///Get the value of the column picture_id, returns the default value if the column is null
    const uint64_t &getValueOfPictureId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getPictureId() const noexcept;
    ///Set the value of the column picture_id
    void setPictureId(const uint64_t &pPictureId) noexcept;
    void setPictureIdToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 12;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
    void getPicture(const drogon::orm::DbClientPtr &clientPtr,
                    const std::function<void(Picture)> &rcb,
                    const drogon::orm::ExceptionCallback &ecb) const;
  private:
    friend drogon::orm::Mapper<Detail>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Detail>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint64_t> id_;
    std::shared_ptr<std::string> trainNum_;
    std::shared_ptr<double> deadWeight_;
    std::shared_ptr<double> roughWeight_;
    std::shared_ptr<double> volume_;
    std::shared_ptr<double> length_;
    std::shared_ptr<uint64_t> trainNumUrl_;
    std::shared_ptr<uint64_t> deadWeightUrl_;
    std::shared_ptr<uint64_t> roughWeightUrl_;
    std::shared_ptr<uint64_t> volumeUrl_;
    std::shared_ptr<uint64_t> lengthUrl_;
    std::shared_ptr<uint64_t> pictureId_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[12]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
        if(dirtyFlag_[1])
        {
            sql += "train_num,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "dead_weight,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "rough_weight,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "volume,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "length,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "train_num_url,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "dead_weight_url,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "rough_weight_url,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "volume_url,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "length_url,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "picture_id,";
            ++parametersCount;
        }
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace sqlite3
} // namespace drogon_model
