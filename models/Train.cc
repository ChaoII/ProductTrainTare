/**
 *
 *  Train.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Train.h"
#include "Picture.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Train::Cols::_id = "id";
const std::string Train::Cols::_coming_time = "coming_time";
const std::string Train::primaryKeyName = "id";
const bool Train::hasPrimaryKey = true;
const std::string Train::tableName = "train";

const std::vector<typename Train::MetaData> Train::metaData_={
{"id","uint64_t","int",8,0,1,1},
{"coming_time","std::string","text",0,0,0,0}
};
const std::string &Train::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Train::Train(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["coming_time"].isNull())
        {
            comingTime_=std::make_shared<std::string>(r["coming_time"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            comingTime_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Train::Train(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            comingTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

Train::Train(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("coming_time"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["coming_time"].isNull())
        {
            comingTime_=std::make_shared<std::string>(pJson["coming_time"].asString());
        }
    }
}

void Train::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            comingTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

void Train::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("coming_time"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["coming_time"].isNull())
        {
            comingTime_=std::make_shared<std::string>(pJson["coming_time"].asString());
        }
    }
}

const uint64_t &Train::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Train::getId() const noexcept
{
    return id_;
}
void Train::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Train::PrimaryKeyType & Train::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Train::getValueOfComingTime() const noexcept
{
    const static std::string defaultValue = std::string();
    if(comingTime_)
        return *comingTime_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Train::getComingTime() const noexcept
{
    return comingTime_;
}
void Train::setComingTime(const std::string &pComingTime) noexcept
{
    comingTime_ = std::make_shared<std::string>(pComingTime);
    dirtyFlag_[1] = true;
}
void Train::setComingTime(std::string &&pComingTime) noexcept
{
    comingTime_ = std::make_shared<std::string>(std::move(pComingTime));
    dirtyFlag_[1] = true;
}
void Train::setComingTimeToNull() noexcept
{
    comingTime_.reset();
    dirtyFlag_[1] = true;
}

void Train::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Train::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "coming_time"
    };
    return inCols;
}

void Train::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getComingTime())
        {
            binder << getValueOfComingTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Train::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void Train::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getComingTime())
        {
            binder << getValueOfComingTime();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Train::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getComingTime())
    {
        ret["coming_time"]=getValueOfComingTime();
    }
    else
    {
        ret["coming_time"]=Json::Value();
    }
    return ret;
}

Json::Value Train::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getComingTime())
            {
                ret[pMasqueradingVector[1]]=getValueOfComingTime();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getComingTime())
    {
        ret["coming_time"]=getValueOfComingTime();
    }
    else
    {
        ret["coming_time"]=Json::Value();
    }
    return ret;
}

bool Train::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    else
    {
        err="The id column cannot be null";
        return false;
    }
    if(pJson.isMember("coming_time"))
    {
        if(!validJsonOfField(1, "coming_time", pJson["coming_time"], err, true))
            return false;
    }
    return true;
}
bool Train::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Train::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("coming_time"))
    {
        if(!validJsonOfField(1, "coming_time", pJson["coming_time"], err, false))
            return false;
    }
    return true;
}
bool Train::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                             const std::vector<std::string> &pMasqueradingVector,
                                             std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Train::validJsonOfField(size_t index,
                             const std::string &fieldName,
                             const Json::Value &pJson,
                             std::string &err,
                             bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
void Train::getPicture(const DbClientPtr &clientPtr,
                       const std::function<void(std::vector<Picture>)> &rcb,
                       const ExceptionCallback &ecb) const
{
    const static std::string sql = "select * from picture where train_id = ?";
    *clientPtr << sql
               << *id_
               >> [rcb = std::move(rcb)](const Result &r){
                   std::vector<Picture> ret;
                   ret.reserve(r.size());
                   for (auto const &row : r)
                   {
                       ret.emplace_back(Picture(row));
                   }
                   rcb(ret);
               }
               >> ecb;
}
