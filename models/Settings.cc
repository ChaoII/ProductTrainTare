/**
 *
 *  Settings.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Settings.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::sqlite3;

const std::string Settings::Cols::_id = "id";
const std::string Settings::Cols::_distance_steel = "distance_steel";
const std::string Settings::Cols::_distance_camera = "distance_camera";
const std::string Settings::Cols::_camera_address = "camera_address";
const std::string Settings::Cols::_update_time = "update_time";
const std::string Settings::Cols::_device_name = "device_name";
const std::string Settings::Cols::_custom_param = "custom_param";
const std::string Settings::Cols::_algorithm_version = "algorithm_version";
const std::string Settings::Cols::_systemVersion = "systemVersion";
const std::string Settings::Cols::_device_version = "device_version";
const std::string Settings::Cols::_media_address = "media_address";
const std::string Settings::primaryKeyName = "id";
const bool Settings::hasPrimaryKey = true;
const std::string Settings::tableName = "settings";

const std::vector<typename Settings::MetaData> Settings::metaData_={
{"id","uint64_t","integer",8,1,1,1},
{"distance_steel","std::string","text",0,0,0,0},
{"distance_camera","std::string","text",0,0,0,0},
{"camera_address","std::string","text",0,0,0,0},
{"update_time","std::string","text",0,0,0,0},
{"device_name","std::string","text",0,0,0,0},
{"custom_param","std::string","text",0,0,0,0},
{"algorithm_version","std::string","text",0,0,0,0},
{"systemVersion","std::string","text",0,0,0,0},
{"device_version","std::string","text",0,0,0,0},
{"media_address","std::string","text",0,0,0,0}
};
const std::string &Settings::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Settings::Settings(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint64_t>(r["id"].as<uint64_t>());
        }
        if(!r["distance_steel"].isNull())
        {
            distanceSteel_=std::make_shared<std::string>(r["distance_steel"].as<std::string>());
        }
        if(!r["distance_camera"].isNull())
        {
            distanceCamera_=std::make_shared<std::string>(r["distance_camera"].as<std::string>());
        }
        if(!r["camera_address"].isNull())
        {
            cameraAddress_=std::make_shared<std::string>(r["camera_address"].as<std::string>());
        }
        if(!r["update_time"].isNull())
        {
            updateTime_=std::make_shared<std::string>(r["update_time"].as<std::string>());
        }
        if(!r["device_name"].isNull())
        {
            deviceName_=std::make_shared<std::string>(r["device_name"].as<std::string>());
        }
        if(!r["custom_param"].isNull())
        {
            customParam_=std::make_shared<std::string>(r["custom_param"].as<std::string>());
        }
        if(!r["algorithm_version"].isNull())
        {
            algorithmVersion_=std::make_shared<std::string>(r["algorithm_version"].as<std::string>());
        }
        if(!r["systemVersion"].isNull())
        {
            systemversion_=std::make_shared<std::string>(r["systemVersion"].as<std::string>());
        }
        if(!r["device_version"].isNull())
        {
            deviceVersion_=std::make_shared<std::string>(r["device_version"].as<std::string>());
        }
        if(!r["media_address"].isNull())
        {
            mediaAddress_=std::make_shared<std::string>(r["media_address"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 11 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            distanceSteel_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            distanceCamera_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            cameraAddress_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            updateTime_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            deviceName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            customParam_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            algorithmVersion_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            systemversion_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            deviceVersion_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            mediaAddress_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Settings::Settings(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            distanceSteel_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            distanceCamera_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            cameraAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            updateTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            deviceName_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            customParam_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            algorithmVersion_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            systemversion_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            deviceVersion_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            mediaAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
}

Settings::Settings(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("distance_steel"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["distance_steel"].isNull())
        {
            distanceSteel_=std::make_shared<std::string>(pJson["distance_steel"].asString());
        }
    }
    if(pJson.isMember("distance_camera"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["distance_camera"].isNull())
        {
            distanceCamera_=std::make_shared<std::string>(pJson["distance_camera"].asString());
        }
    }
    if(pJson.isMember("camera_address"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["camera_address"].isNull())
        {
            cameraAddress_=std::make_shared<std::string>(pJson["camera_address"].asString());
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["update_time"].isNull())
        {
            updateTime_=std::make_shared<std::string>(pJson["update_time"].asString());
        }
    }
    if(pJson.isMember("device_name"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["device_name"].isNull())
        {
            deviceName_=std::make_shared<std::string>(pJson["device_name"].asString());
        }
    }
    if(pJson.isMember("custom_param"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["custom_param"].isNull())
        {
            customParam_=std::make_shared<std::string>(pJson["custom_param"].asString());
        }
    }
    if(pJson.isMember("algorithm_version"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["algorithm_version"].isNull())
        {
            algorithmVersion_=std::make_shared<std::string>(pJson["algorithm_version"].asString());
        }
    }
    if(pJson.isMember("systemVersion"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["systemVersion"].isNull())
        {
            systemversion_=std::make_shared<std::string>(pJson["systemVersion"].asString());
        }
    }
    if(pJson.isMember("device_version"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["device_version"].isNull())
        {
            deviceVersion_=std::make_shared<std::string>(pJson["device_version"].asString());
        }
    }
    if(pJson.isMember("media_address"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["media_address"].isNull())
        {
            mediaAddress_=std::make_shared<std::string>(pJson["media_address"].asString());
        }
    }
}

void Settings::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 11)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            distanceSteel_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            distanceCamera_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            cameraAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            updateTime_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            deviceName_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            customParam_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            algorithmVersion_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            systemversion_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            deviceVersion_=std::make_shared<std::string>(pJson[pMasqueradingVector[9]].asString());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            mediaAddress_=std::make_shared<std::string>(pJson[pMasqueradingVector[10]].asString());
        }
    }
}

void Settings::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint64_t>((uint64_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("distance_steel"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["distance_steel"].isNull())
        {
            distanceSteel_=std::make_shared<std::string>(pJson["distance_steel"].asString());
        }
    }
    if(pJson.isMember("distance_camera"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["distance_camera"].isNull())
        {
            distanceCamera_=std::make_shared<std::string>(pJson["distance_camera"].asString());
        }
    }
    if(pJson.isMember("camera_address"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["camera_address"].isNull())
        {
            cameraAddress_=std::make_shared<std::string>(pJson["camera_address"].asString());
        }
    }
    if(pJson.isMember("update_time"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["update_time"].isNull())
        {
            updateTime_=std::make_shared<std::string>(pJson["update_time"].asString());
        }
    }
    if(pJson.isMember("device_name"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["device_name"].isNull())
        {
            deviceName_=std::make_shared<std::string>(pJson["device_name"].asString());
        }
    }
    if(pJson.isMember("custom_param"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["custom_param"].isNull())
        {
            customParam_=std::make_shared<std::string>(pJson["custom_param"].asString());
        }
    }
    if(pJson.isMember("algorithm_version"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["algorithm_version"].isNull())
        {
            algorithmVersion_=std::make_shared<std::string>(pJson["algorithm_version"].asString());
        }
    }
    if(pJson.isMember("systemVersion"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["systemVersion"].isNull())
        {
            systemversion_=std::make_shared<std::string>(pJson["systemVersion"].asString());
        }
    }
    if(pJson.isMember("device_version"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["device_version"].isNull())
        {
            deviceVersion_=std::make_shared<std::string>(pJson["device_version"].asString());
        }
    }
    if(pJson.isMember("media_address"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["media_address"].isNull())
        {
            mediaAddress_=std::make_shared<std::string>(pJson["media_address"].asString());
        }
    }
}

const uint64_t &Settings::getValueOfId() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Settings::getId() const noexcept
{
    return id_;
}
void Settings::setId(const uint64_t &pId) noexcept
{
    id_ = std::make_shared<uint64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Settings::PrimaryKeyType & Settings::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Settings::getValueOfDistanceSteel() const noexcept
{
    const static std::string defaultValue = std::string();
    if(distanceSteel_)
        return *distanceSteel_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Settings::getDistanceSteel() const noexcept
{
    return distanceSteel_;
}
void Settings::setDistanceSteel(const std::string &pDistanceSteel) noexcept
{
    distanceSteel_ = std::make_shared<std::string>(pDistanceSteel);
    dirtyFlag_[1] = true;
}
void Settings::setDistanceSteel(std::string &&pDistanceSteel) noexcept
{
    distanceSteel_ = std::make_shared<std::string>(std::move(pDistanceSteel));
    dirtyFlag_[1] = true;
}
void Settings::setDistanceSteelToNull() noexcept
{
    distanceSteel_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Settings::getValueOfDistanceCamera() const noexcept
{
    const static std::string defaultValue = std::string();
    if(distanceCamera_)
        return *distanceCamera_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Settings::getDistanceCamera() const noexcept
{
    return distanceCamera_;
}
void Settings::setDistanceCamera(const std::string &pDistanceCamera) noexcept
{
    distanceCamera_ = std::make_shared<std::string>(pDistanceCamera);
    dirtyFlag_[2] = true;
}
void Settings::setDistanceCamera(std::string &&pDistanceCamera) noexcept
{
    distanceCamera_ = std::make_shared<std::string>(std::move(pDistanceCamera));
    dirtyFlag_[2] = true;
}
void Settings::setDistanceCameraToNull() noexcept
{
    distanceCamera_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Settings::getValueOfCameraAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(cameraAddress_)
        return *cameraAddress_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Settings::getCameraAddress() const noexcept
{
    return cameraAddress_;
}
void Settings::setCameraAddress(const std::string &pCameraAddress) noexcept
{
    cameraAddress_ = std::make_shared<std::string>(pCameraAddress);
    dirtyFlag_[3] = true;
}
void Settings::setCameraAddress(std::string &&pCameraAddress) noexcept
{
    cameraAddress_ = std::make_shared<std::string>(std::move(pCameraAddress));
    dirtyFlag_[3] = true;
}
void Settings::setCameraAddressToNull() noexcept
{
    cameraAddress_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Settings::getValueOfUpdateTime() const noexcept
{
    const static std::string defaultValue = std::string();
    if(updateTime_)
        return *updateTime_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Settings::getUpdateTime() const noexcept
{
    return updateTime_;
}
void Settings::setUpdateTime(const std::string &pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<std::string>(pUpdateTime);
    dirtyFlag_[4] = true;
}
void Settings::setUpdateTime(std::string &&pUpdateTime) noexcept
{
    updateTime_ = std::make_shared<std::string>(std::move(pUpdateTime));
    dirtyFlag_[4] = true;
}
void Settings::setUpdateTimeToNull() noexcept
{
    updateTime_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Settings::getValueOfDeviceName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(deviceName_)
        return *deviceName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Settings::getDeviceName() const noexcept
{
    return deviceName_;
}
void Settings::setDeviceName(const std::string &pDeviceName) noexcept
{
    deviceName_ = std::make_shared<std::string>(pDeviceName);
    dirtyFlag_[5] = true;
}
void Settings::setDeviceName(std::string &&pDeviceName) noexcept
{
    deviceName_ = std::make_shared<std::string>(std::move(pDeviceName));
    dirtyFlag_[5] = true;
}
void Settings::setDeviceNameToNull() noexcept
{
    deviceName_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Settings::getValueOfCustomParam() const noexcept
{
    const static std::string defaultValue = std::string();
    if(customParam_)
        return *customParam_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Settings::getCustomParam() const noexcept
{
    return customParam_;
}
void Settings::setCustomParam(const std::string &pCustomParam) noexcept
{
    customParam_ = std::make_shared<std::string>(pCustomParam);
    dirtyFlag_[6] = true;
}
void Settings::setCustomParam(std::string &&pCustomParam) noexcept
{
    customParam_ = std::make_shared<std::string>(std::move(pCustomParam));
    dirtyFlag_[6] = true;
}
void Settings::setCustomParamToNull() noexcept
{
    customParam_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Settings::getValueOfAlgorithmVersion() const noexcept
{
    const static std::string defaultValue = std::string();
    if(algorithmVersion_)
        return *algorithmVersion_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Settings::getAlgorithmVersion() const noexcept
{
    return algorithmVersion_;
}
void Settings::setAlgorithmVersion(const std::string &pAlgorithmVersion) noexcept
{
    algorithmVersion_ = std::make_shared<std::string>(pAlgorithmVersion);
    dirtyFlag_[7] = true;
}
void Settings::setAlgorithmVersion(std::string &&pAlgorithmVersion) noexcept
{
    algorithmVersion_ = std::make_shared<std::string>(std::move(pAlgorithmVersion));
    dirtyFlag_[7] = true;
}
void Settings::setAlgorithmVersionToNull() noexcept
{
    algorithmVersion_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Settings::getValueOfSystemversion() const noexcept
{
    const static std::string defaultValue = std::string();
    if(systemversion_)
        return *systemversion_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Settings::getSystemversion() const noexcept
{
    return systemversion_;
}
void Settings::setSystemversion(const std::string &pSystemversion) noexcept
{
    systemversion_ = std::make_shared<std::string>(pSystemversion);
    dirtyFlag_[8] = true;
}
void Settings::setSystemversion(std::string &&pSystemversion) noexcept
{
    systemversion_ = std::make_shared<std::string>(std::move(pSystemversion));
    dirtyFlag_[8] = true;
}
void Settings::setSystemversionToNull() noexcept
{
    systemversion_.reset();
    dirtyFlag_[8] = true;
}

const std::string &Settings::getValueOfDeviceVersion() const noexcept
{
    const static std::string defaultValue = std::string();
    if(deviceVersion_)
        return *deviceVersion_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Settings::getDeviceVersion() const noexcept
{
    return deviceVersion_;
}
void Settings::setDeviceVersion(const std::string &pDeviceVersion) noexcept
{
    deviceVersion_ = std::make_shared<std::string>(pDeviceVersion);
    dirtyFlag_[9] = true;
}
void Settings::setDeviceVersion(std::string &&pDeviceVersion) noexcept
{
    deviceVersion_ = std::make_shared<std::string>(std::move(pDeviceVersion));
    dirtyFlag_[9] = true;
}
void Settings::setDeviceVersionToNull() noexcept
{
    deviceVersion_.reset();
    dirtyFlag_[9] = true;
}

const std::string &Settings::getValueOfMediaAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(mediaAddress_)
        return *mediaAddress_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Settings::getMediaAddress() const noexcept
{
    return mediaAddress_;
}
void Settings::setMediaAddress(const std::string &pMediaAddress) noexcept
{
    mediaAddress_ = std::make_shared<std::string>(pMediaAddress);
    dirtyFlag_[10] = true;
}
void Settings::setMediaAddress(std::string &&pMediaAddress) noexcept
{
    mediaAddress_ = std::make_shared<std::string>(std::move(pMediaAddress));
    dirtyFlag_[10] = true;
}
void Settings::setMediaAddressToNull() noexcept
{
    mediaAddress_.reset();
    dirtyFlag_[10] = true;
}

void Settings::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint64_t>(id);
}

const std::vector<std::string> &Settings::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "distance_steel",
        "distance_camera",
        "camera_address",
        "update_time",
        "device_name",
        "custom_param",
        "algorithm_version",
        "systemVersion",
        "device_version",
        "media_address"
    };
    return inCols;
}

void Settings::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getDistanceSteel())
        {
            binder << getValueOfDistanceSteel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDistanceCamera())
        {
            binder << getValueOfDistanceCamera();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCameraAddress())
        {
            binder << getValueOfCameraAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDeviceName())
        {
            binder << getValueOfDeviceName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCustomParam())
        {
            binder << getValueOfCustomParam();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAlgorithmVersion())
        {
            binder << getValueOfAlgorithmVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSystemversion())
        {
            binder << getValueOfSystemversion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getDeviceVersion())
        {
            binder << getValueOfDeviceVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getMediaAddress())
        {
            binder << getValueOfMediaAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Settings::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    return ret;
}

void Settings::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getDistanceSteel())
        {
            binder << getValueOfDistanceSteel();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getDistanceCamera())
        {
            binder << getValueOfDistanceCamera();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCameraAddress())
        {
            binder << getValueOfCameraAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getUpdateTime())
        {
            binder << getValueOfUpdateTime();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDeviceName())
        {
            binder << getValueOfDeviceName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getCustomParam())
        {
            binder << getValueOfCustomParam();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getAlgorithmVersion())
        {
            binder << getValueOfAlgorithmVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getSystemversion())
        {
            binder << getValueOfSystemversion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getDeviceVersion())
        {
            binder << getValueOfDeviceVersion();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getMediaAddress())
        {
            binder << getValueOfMediaAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Settings::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getDistanceSteel())
    {
        ret["distance_steel"]=getValueOfDistanceSteel();
    }
    else
    {
        ret["distance_steel"]=Json::Value();
    }
    if(getDistanceCamera())
    {
        ret["distance_camera"]=getValueOfDistanceCamera();
    }
    else
    {
        ret["distance_camera"]=Json::Value();
    }
    if(getCameraAddress())
    {
        ret["camera_address"]=getValueOfCameraAddress();
    }
    else
    {
        ret["camera_address"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getValueOfUpdateTime();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getDeviceName())
    {
        ret["device_name"]=getValueOfDeviceName();
    }
    else
    {
        ret["device_name"]=Json::Value();
    }
    if(getCustomParam())
    {
        ret["custom_param"]=getValueOfCustomParam();
    }
    else
    {
        ret["custom_param"]=Json::Value();
    }
    if(getAlgorithmVersion())
    {
        ret["algorithm_version"]=getValueOfAlgorithmVersion();
    }
    else
    {
        ret["algorithm_version"]=Json::Value();
    }
    if(getSystemversion())
    {
        ret["systemVersion"]=getValueOfSystemversion();
    }
    else
    {
        ret["systemVersion"]=Json::Value();
    }
    if(getDeviceVersion())
    {
        ret["device_version"]=getValueOfDeviceVersion();
    }
    else
    {
        ret["device_version"]=Json::Value();
    }
    if(getMediaAddress())
    {
        ret["media_address"]=getValueOfMediaAddress();
    }
    else
    {
        ret["media_address"]=Json::Value();
    }
    return ret;
}

Json::Value Settings::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 11)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::UInt64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getDistanceSteel())
            {
                ret[pMasqueradingVector[1]]=getValueOfDistanceSteel();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getDistanceCamera())
            {
                ret[pMasqueradingVector[2]]=getValueOfDistanceCamera();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCameraAddress())
            {
                ret[pMasqueradingVector[3]]=getValueOfCameraAddress();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getUpdateTime())
            {
                ret[pMasqueradingVector[4]]=getValueOfUpdateTime();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getDeviceName())
            {
                ret[pMasqueradingVector[5]]=getValueOfDeviceName();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getCustomParam())
            {
                ret[pMasqueradingVector[6]]=getValueOfCustomParam();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getAlgorithmVersion())
            {
                ret[pMasqueradingVector[7]]=getValueOfAlgorithmVersion();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getSystemversion())
            {
                ret[pMasqueradingVector[8]]=getValueOfSystemversion();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getDeviceVersion())
            {
                ret[pMasqueradingVector[9]]=getValueOfDeviceVersion();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getMediaAddress())
            {
                ret[pMasqueradingVector[10]]=getValueOfMediaAddress();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::UInt64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getDistanceSteel())
    {
        ret["distance_steel"]=getValueOfDistanceSteel();
    }
    else
    {
        ret["distance_steel"]=Json::Value();
    }
    if(getDistanceCamera())
    {
        ret["distance_camera"]=getValueOfDistanceCamera();
    }
    else
    {
        ret["distance_camera"]=Json::Value();
    }
    if(getCameraAddress())
    {
        ret["camera_address"]=getValueOfCameraAddress();
    }
    else
    {
        ret["camera_address"]=Json::Value();
    }
    if(getUpdateTime())
    {
        ret["update_time"]=getValueOfUpdateTime();
    }
    else
    {
        ret["update_time"]=Json::Value();
    }
    if(getDeviceName())
    {
        ret["device_name"]=getValueOfDeviceName();
    }
    else
    {
        ret["device_name"]=Json::Value();
    }
    if(getCustomParam())
    {
        ret["custom_param"]=getValueOfCustomParam();
    }
    else
    {
        ret["custom_param"]=Json::Value();
    }
    if(getAlgorithmVersion())
    {
        ret["algorithm_version"]=getValueOfAlgorithmVersion();
    }
    else
    {
        ret["algorithm_version"]=Json::Value();
    }
    if(getSystemversion())
    {
        ret["systemVersion"]=getValueOfSystemversion();
    }
    else
    {
        ret["systemVersion"]=Json::Value();
    }
    if(getDeviceVersion())
    {
        ret["device_version"]=getValueOfDeviceVersion();
    }
    else
    {
        ret["device_version"]=Json::Value();
    }
    if(getMediaAddress())
    {
        ret["media_address"]=getValueOfMediaAddress();
    }
    else
    {
        ret["media_address"]=Json::Value();
    }
    return ret;
}

bool Settings::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("distance_steel"))
    {
        if(!validJsonOfField(1, "distance_steel", pJson["distance_steel"], err, true))
            return false;
    }
    if(pJson.isMember("distance_camera"))
    {
        if(!validJsonOfField(2, "distance_camera", pJson["distance_camera"], err, true))
            return false;
    }
    if(pJson.isMember("camera_address"))
    {
        if(!validJsonOfField(3, "camera_address", pJson["camera_address"], err, true))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(4, "update_time", pJson["update_time"], err, true))
            return false;
    }
    if(pJson.isMember("device_name"))
    {
        if(!validJsonOfField(5, "device_name", pJson["device_name"], err, true))
            return false;
    }
    if(pJson.isMember("custom_param"))
    {
        if(!validJsonOfField(6, "custom_param", pJson["custom_param"], err, true))
            return false;
    }
    if(pJson.isMember("algorithm_version"))
    {
        if(!validJsonOfField(7, "algorithm_version", pJson["algorithm_version"], err, true))
            return false;
    }
    if(pJson.isMember("systemVersion"))
    {
        if(!validJsonOfField(8, "systemVersion", pJson["systemVersion"], err, true))
            return false;
    }
    if(pJson.isMember("device_version"))
    {
        if(!validJsonOfField(9, "device_version", pJson["device_version"], err, true))
            return false;
    }
    if(pJson.isMember("media_address"))
    {
        if(!validJsonOfField(10, "media_address", pJson["media_address"], err, true))
            return false;
    }
    return true;
}
bool Settings::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Settings::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("distance_steel"))
    {
        if(!validJsonOfField(1, "distance_steel", pJson["distance_steel"], err, false))
            return false;
    }
    if(pJson.isMember("distance_camera"))
    {
        if(!validJsonOfField(2, "distance_camera", pJson["distance_camera"], err, false))
            return false;
    }
    if(pJson.isMember("camera_address"))
    {
        if(!validJsonOfField(3, "camera_address", pJson["camera_address"], err, false))
            return false;
    }
    if(pJson.isMember("update_time"))
    {
        if(!validJsonOfField(4, "update_time", pJson["update_time"], err, false))
            return false;
    }
    if(pJson.isMember("device_name"))
    {
        if(!validJsonOfField(5, "device_name", pJson["device_name"], err, false))
            return false;
    }
    if(pJson.isMember("custom_param"))
    {
        if(!validJsonOfField(6, "custom_param", pJson["custom_param"], err, false))
            return false;
    }
    if(pJson.isMember("algorithm_version"))
    {
        if(!validJsonOfField(7, "algorithm_version", pJson["algorithm_version"], err, false))
            return false;
    }
    if(pJson.isMember("systemVersion"))
    {
        if(!validJsonOfField(8, "systemVersion", pJson["systemVersion"], err, false))
            return false;
    }
    if(pJson.isMember("device_version"))
    {
        if(!validJsonOfField(9, "device_version", pJson["device_version"], err, false))
            return false;
    }
    if(pJson.isMember("media_address"))
    {
        if(!validJsonOfField(10, "media_address", pJson["media_address"], err, false))
            return false;
    }
    return true;
}
bool Settings::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 11)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Settings::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
